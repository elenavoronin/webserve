#pragma once

#include <iostream>
#include <map>
#include <string>
#include <cstdlib>
#include <sstream>
#include <unistd.h>
#include <sys/wait.h>
#include "Server.hpp"
#include "HttpRequest.hpp"
#include "HttpResponse.hpp"

# define READ 0
# define WRITE 1

class Server;
class HttpRequest;
class HttpResponse;

class CGI {

	private:
		std::vector<std::string> 	_envVars;			// Store environment variables as strings
		std::vector<char *> 		_env;				// Convert to char* format for execve
		std::string 				_queryParams;		// Store query parameters from the request
		std::string 				_inputData;			// Store input data for POST requests
		std::string 				_method;			// Store the HTTP request method (e.g., GET, POST)
		std::string 				_path;				// Store the request path or script location
		std::string 				_pass;				// Store the path to the CGI script
		pid_t 						_pid;				// Store the process ID for the CGI script
		std::string 				_cgiOutput;			// Store the output generated by the CGI script
		int 						_status;			// Store the exit status of the CGI script
		int 						_fromCgiPipe[2];	// Pipe for the parent process to read CGI responses
		int 						_toCgiPipe[2];		// Pipe for the parent process to send data to CGI

	public:
		// Constructor
		CGI(HttpRequest* request);

		// Destructor                                    
		~CGI();

		/* Methods for managing input and communication */
		// Set up pipes for communication with CGI
		bool setupPipes();
		// Handle CGI process logic for the child                 
		void handleChildProcess(HttpRequest* request);
		// Handle parent process communication with the CGI
		void handleParentProcess();

		/* Methods for environment variable management */
		// Set up environment variables for the CGI script
		void initializeEnvVars(HttpRequest* request);
		// Retrieve a specific environment variable
		std::string getEnv(const std::string& var_name);

		/* Methods for parsing and managing query strings */
		// Parse query string from the request
		void parseQueryString(HttpRequest* request);
		// Retrieve a specific query parameter
		std::string getQueryParam(const std::string& param_name);

		/* Methods for handling and sending responses */
		// Read CGI output from the response pipe
		void readCgiOutput();
		// Send CGI output as HTTP response
		void sendResponse(int client_socket, const std::string& cgi_output);
		// Send full HTTP response
		// void sendResponse(const std::string& status, const std::map<std::string, std::string>& headers, const std::string& body);

		/* Methods for HTTP headers and output */
		// Send HTTP Content-Type header
		void sendHeader(const std::string& content_type);
		// Output content (e.g., HTML)
		void output(const std::string& content);

		/* Methods to handle and execute CGI scripts */
		// Execute the CGI script
		void executeCgi();
		// Process CGI request
		void handleCgiRequest(int client_socket, const std::string& path, Server server, HttpRequest &request);

		/* Getter methods for read and write file descriptors */
		int getReadFd() const;
		int getWriteFd() const;
};
