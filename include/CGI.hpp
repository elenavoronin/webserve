#pragma once

#include <iostream>
#include <map>
#include <string>
#include <cstdlib>
#include <sstream>
#include <unistd.h>
#include <sys/wait.h>
#include "Server.hpp"
#include "HttpRequest.hpp"
#include "HttpResponse.hpp"
#include "utils.hpp"

class Server;
class HttpRequest;
class HttpResponse;

/**
 * @brief The CGI class handles execution of CGI scripts and manages communication
 *        between the server and the CGI script using pipes.
 */
class CGI {

	private:
		std::vector<std::string> 	_envVars;			// Store environment variables as strings
		std::vector<char *> 		_env;				// Convert to char* format for execve
		std::string 				_queryParams;		// Store query parameters from the request
		std::string 				_inputData;			// Store input data for POST requests
		std::string 				_method;			// Store the HTTP request method (e.g., GET, POST)
		std::string 				_path;				// Store the request path or script location
		std::string 				_pass;				// Store the path to the CGI script
		pid_t 						_pid;				// Store the process ID for the CGI script
		std::string 				_cgiOutput;			// Store the output generated by the CGI script
		std::string 				_cgiInput;			// Store the output generated by the CGI script
		int							_inputIndex;		// Tracker for processing _cgiInput.
		int 						_status;			// Store the exit status of the CGI script
		int 						_fromCgiPipe[2];	// Pipe for the parent process to read CGI responses
		int 						_toCgiPipe[2];		// Pipe for the parent process to send data to CGI


	public:
		CGI(HttpRequest* request);
		~CGI();

		bool 				setupPipes();              
		void 				handleChildProcess(HttpRequest* request);
		void 				handleParentProcess();
		void 				initializeEnvVars(HttpRequest* request);
		std::string 		getEnv(const std::string& var_name);
		void 				parseQueryString(HttpRequest* request);
		std::string 		getQueryParam(const std::string& param_name);
		void 				readCgiOutput();
		void 				writeCgiInput();
		void 				sendResponse(int client_socket, const std::string& cgi_output);
		void 				sendHeader(const std::string& content_type);
		void 				output(const std::string& content);
		void 				executeCgi();
		void 				handleCgiRequest(int client_socket, const std::string& path, Server server, HttpRequest &request);
		int 				getReadFd() const;
		int 				getWriteFd() const;
};
